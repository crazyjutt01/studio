/**
 * @fileoverview Firestore Security Rules for FinSafe application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has complete control over their own data (budgets, transactions, categories, saving goals, alerts, and emergency contacts).
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with further subcollections for budgets, transactions, etc.  This structure enables simple, path-based authorization.
 *
 * Key Security Decisions:
 * - Users can only access data under their own user ID.
 * - No listing of all users is allowed.
 * - Authorization is based solely on the authenticated user's ID (`request.auth.uid`) matching the `userId` path parameter.
 *
 * Denormalization for Authorization:
 *  -The `userId` field within each document is implicitly denormalized via the path. This allows for fast, simple ownership checks without additional reads.
 *
 * Structural Segregation:
 *  - User-specific data is stored in dedicated subcollections, ensuring privacy and efficient querying.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     * @param {string} userId The user ID to check against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of an existing document.
     * @param {string} userId The user ID to check against.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for user documents.
     * @path /users/{userId}
     * @allow (create) - A user can create their own user document if the userId matches their auth UID.
     * @allow (get, update, delete) - A user can get, update, or delete their own user document if the userId matches their auth UID.
     * @deny (create) - A user cannot create a user document for another user.
     * @deny (get, update, delete) - A user cannot get, update, or delete another user's document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // No listing of all users.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for budget documents.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) - A user can create a budget under their user ID.
     * @allow (get, list, update, delete) - A user can get, list, update, or delete budgets under their user ID.
     * @deny (create) - A user cannot create a budget under another user's ID.
     * @deny (get, list, update, delete) - A user cannot get, list, update, or delete budgets under another user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for transaction documents.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) - A user can create a transaction under their user ID.
     * @allow (get, list, update, delete) - A user can get, list, update, or delete transactions under their user ID.
     * @deny (create) - A user cannot create a transaction under another user's ID.
     * @deny (get, list, update, delete) - A user cannot get, list, update, or delete transactions under another user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for category documents.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) - A user can create a category under their user ID.
     * @allow (get, list, update, delete) - A user can get, list, update, or delete categories under their user ID.
     * @deny (create) - A user cannot create a category under another user's ID.
     * @deny (get, list, update, delete) - A user cannot get, list, update, or delete categories under another user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for saving goal documents.
     * @path /users/{userId}/savingGoals/{savingGoalId}
     * @allow (create) - A user can create a saving goal under their user ID.
     * @allow (get, list, update, delete) - A user can get, list, update, or delete saving goals under their user ID.
     * @deny (create) - A user cannot create a saving goal under another user's ID.
     * @deny (get, list, update, delete) - A user cannot get, list, update, or delete saving goals under another user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/savingGoals/{savingGoalId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for alert documents.
     * @path /users/{userId}/alerts/{alertId}
     * @allow (create) - A user can create an alert under their user ID.
     * @allow (get, list, update, delete) - A user can get, list, update, or delete alerts under their user ID.
     * @deny (create) - A user cannot create an alert under another user's ID.
     * @deny (get, list, update, delete) - A user cannot get, list, update, or delete alerts under another user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/alerts/{alertId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for emergency contact documents.
     * @path /users/{userId}/emergencyContacts/{contactId}
     * @allow (create) - A user can create an emergency contact under their user ID.
     * @allow (get, list, update, delete) - A user can get, list, update, or delete emergency contacts under their user ID.
     * @deny (create) - A user cannot create an emergency contact under another user's ID.
     * @deny (get, list, update, delete) - A user cannot get, list, update, or delete emergency contacts under another user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/emergencyContacts/{contactId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}