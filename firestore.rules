/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for the FinSafe application.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with subcollections for budgets, transactions, categories, saving goals, alerts, and emergency contacts.
 *
 * Key Security Decisions:
 * - User listing is disabled to prevent information disclosure.
 * - All write operations require authentication, with access restricted to the owner of the data.
 * - Data consistency between the path and document fields is enforced for user-specific data.
 * - Read operations are permitted for users with unverified emails.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and that the resource exists.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines the rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) If the authenticated user's ID matches the requested userId.
     * @deny (create) If the authenticated user's ID does not match the requested userId.
     * @allow (get) If the authenticated user's ID matches the requested userId.
     * @deny (get) If the authenticated user's ID does not match the requested userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the rules for the /users/{userId}/budgets/{budgetId} collection.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) If the authenticated user's ID matches the requested userId.
     * @deny (create) If the authenticated user's ID does not match the requested userId.
     * @allow (get) If the authenticated user's ID matches the requested userId.
     * @deny (get) If the authenticated user's ID does not match the requested userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow get: if true;
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the rules for the /users/{userId}/transactions/{transactionId} collection.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) If the authenticated user's ID matches the requested userId.
     * @deny (create) If the authenticated user's ID does not match the requested userId.
     * @allow (get) If the authenticated user's ID matches the requested userId.
     * @deny (get) If the authenticated user's ID does not match the requested userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if true;
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the rules for the /users/{userId}/categories/{categoryId} collection.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) If the authenticated user's ID matches the requested userId.
     * @deny (create) If the authenticated user's ID does not match the requested userId.
     * @allow (get) If the authenticated user's ID matches the requested userId.
     * @deny (get) If the authenticated user's ID does not match the requested userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if true;
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the rules for the /users/{userId}/savingGoals/{savingGoalId} collection.
     * @path /users/{userId}/savingGoals/{savingGoalId}
     * @allow (create) If the authenticated user's ID matches the requested userId.
     * @deny (create) If the authenticated user's ID does not match the requested userId.
     * @allow (get) If the authenticated user's ID matches the requested userId.
     * @deny (get) If the authenticated user's ID does not match the requested userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/savingGoals/{savingGoalId} {
      allow get: if true;
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the rules for the /users/{userId}/alerts/{alertId} collection.
     * @path /users/{userId}/alerts/{alertId}
     * @allow (create) If the authenticated user's ID matches the requested userId.
     * @deny (create) If the authenticated user's ID does not match the requested userId.
     * @allow (get) If the authenticated user's ID matches the requested userId.
     * @deny (get) If the authenticated user's ID does not match the requested userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/alerts/{alertId} {
      allow get: if true;
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the rules for the /users/{userId}/emergencyContacts/{contactId} collection.
     * @path /users/{userId}/emergencyContacts/{contactId}
     * @allow (create) If the authenticated user's ID matches the requested userId.
     * @deny (create) If the authenticated user's ID does not match the requested userId.
     * @allow (get) If the authenticated user's ID matches the requested userId.
     * @deny (get) If the authenticated user's ID does not match the requested userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/emergencyContacts/{contactId} {
      allow get: if true;
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}