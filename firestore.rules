/**
 * @fileoverview Firestore Security Rules for FinSafe Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Only the authenticated user can access their own data, ensuring privacy and data isolation.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with subcollections for budgets, transactions, categories, savingGoals, alerts, and emergencyContacts.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized data access.
 * - All write operations are restricted to the authenticated user.
 * - Data consistency between the path and the document's internal fields is enforced.
 *
 * Authorization Independence:
 * This ruleset avoids `get()` calls by denormalizing user IDs into documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all users. Only allows access to specific user documents.
     * @path /users
     * @deny (list) Always denies listing users.
     * @principle Prevents information leakage by disallowing user enumeration.
     */
    match /users {
      allow list: if false;
    }

    /**
     * @description Allows users to read and write their own user document.
     * @path /users/{userId}
     * @allow (create) if the user's ID matches (self-registration).
     * @allow (get, update, delete) if the user's ID matches.
     * @deny (create) if the user's ID does not match.
     * @principle Enforces strict ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own budgets.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create, update, get, list, delete) if the user's ID matches.
     * @principle Enforces strict ownership for user budgets.
     */
    match /users/{userId}/budgets/{budgetId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own transactions.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create, update, get, list, delete) if the user's ID matches.
     * @principle Enforces strict ownership for user transactions.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own categories.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create, update, get, list, delete) if the user's ID matches.
     * @principle Enforces strict ownership for user categories.
     */
    match /users/{userId}/categories/{categoryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own saving goals.
     * @path /users/{userId}/savingGoals/{savingGoalId}
     * @allow (create, update, get, list, delete) if the user's ID matches.
     * @principle Enforces strict ownership for user saving goals.
     */
    match /users/{userId}/savingGoals/{savingGoalId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own alerts.
     * @path /users/{userId}/alerts/{alertId}
     * @allow (create, update, get, list, delete) if the user's ID matches.
     * @principle Enforces strict ownership for user alerts.
     */
    match /users/{userId}/alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own emergency contacts.
     * @path /users/{userId}/emergencyContacts/{contactId}
     * @allow (create, update, get, list, delete) if the user's ID matches.
     * @principle Enforces strict ownership for user emergency contacts.
     */
    match /users/{userId}/emergencyContacts/{contactId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}