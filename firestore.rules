/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for the FinSafe application.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with subcollections for budgets, transactions, categories, saving goals, alerts, and emergency contacts.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing other users' data is disallowed.
 * - Authorization is based on matching the authenticated user's UID with the userId path parameter.
 * - For increased security and performance, all rules are designed to avoid `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and the resource exists.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Root-level rule to prevent unauthorized access.
     */
    match /{document=**} {
      allow read, write: if false;
    }

    /**
     * @description Manages access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile if request.auth.uid == 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can access their profile if request.auth.uid == 'user123'.
     * @deny (create) User with ID 'user123' cannot create a profile with a mismatched request.auth.uid.
     * @deny (get, update, delete) User with ID 'user456' cannot access user 'user123' profile.
     * @principle Enforces document ownership for all access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to budget data for a specific user.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) User 'user123' can create a budget under their ID if request.auth.uid == 'user123'.
     * @allow (get, update, delete) User 'user123' can manage their budgets if request.auth.uid == 'user123'.
     * @deny (create) User 'user456' cannot create a budget under user 'user123''s ID.
     * @deny (get, update, delete) User 'user456' cannot access user 'user123' budgets.
     * @principle Enforces document ownership for all access.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to transaction data for a specific user.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) User 'user123' can create a transaction under their ID if request.auth.uid == 'user123'.
     * @allow (get, update, delete) User 'user123' can manage their transactions if request.auth.uid == 'user123'.
     * @deny (create) User 'user456' cannot create a transaction under user 'user123''s ID.
     * @deny (get, update, delete) User 'user456' cannot access user 'user123' transactions.
     * @principle Enforces document ownership for all access.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to category data for a specific user.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) User 'user123' can create a category under their ID if request.auth.uid == 'user123'.
     * @allow (get, update, delete) User 'user123' can manage their categories if request.auth.uid == 'user123'.
     * @deny (create) User 'user456' cannot create a category under user 'user123''s ID.
     * @deny (get, update, delete) User 'user456' cannot access user 'user123' categories.
     * @principle Enforces document ownership for all access.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to saving goal data for a specific user.
     * @path /users/{userId}/savingGoals/{savingGoalId}
     * @allow (create) User 'user123' can create a saving goal under their ID if request.auth.uid == 'user123'.
     * @allow (get, update, delete) User 'user123' can manage their saving goals if request.auth.uid == 'user123'.
     * @deny (create) User 'user456' cannot create a saving goal under user 'user123''s ID.
     * @deny (get, update, delete) User 'user456' cannot access user 'user123' saving goals.
     * @principle Enforces document ownership for all access.
     */
    match /users/{userId}/savingGoals/{savingGoalId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to alert data for a specific user.
     * @path /users/{userId}/alerts/{alertId}
     * @allow (create) User 'user123' can create an alert under their ID if request.auth.uid == 'user123'.
     * @allow (get, update, delete) User 'user123' can manage their alerts if request.auth.uid == 'user123'.
     * @deny (create) User 'user456' cannot create an alert under user 'user123''s ID.
     * @deny (get, update, delete) User 'user456' cannot access user 'user123' alerts.
     * @principle Enforces document ownership for all access.
     */
    match /users/{userId}/alerts/{alertId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to emergency contact data for a specific user.
     * @path /users/{userId}/emergencyContacts/{contactId}
     * @allow (create) User 'user123' can create an emergency contact under their ID if request.auth.uid == 'user123'.
     * @allow (get, update, delete) User 'user123' can manage their emergency contacts if request.auth.uid == 'user123'.
     * @deny (create) User 'user456' cannot create an emergency contact under user 'user123''s ID.
     * @deny (get, update, delete) User 'user456' cannot access user 'user123' emergency contacts.
     * @principle Enforces document ownership for all access.
     */
    match /users/{userId}/emergencyContacts/{contactId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Manages access to challenge data for a specific user.
      * @path /users/{userId}/challenges/{challengeId}
      * @allow (create) User 'user123' can create a challenge under their ID if request.auth.uid == 'user123'.
      * @allow (get, update, delete) User 'user123' can manage their challenges if request.auth.uid == 'user123'.
      * @deny (create) User 'user456' cannot create a challenge under user 'user123''s ID.
      * @deny (get, update, delete) User 'user456' cannot access user 'user123' challenges.
      * @principle Enforces document ownership for all access.
      */
     match /users/{userId}/challenges/{challengeId} {
       allow get: if isOwner(userId);
       allow list: if isOwner(userId);
       allow create: if isOwner(userId);
       allow update: if isExistingOwner(userId);
       allow delete: if isExistingOwner(userId);
     }
  }
}