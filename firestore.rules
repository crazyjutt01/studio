/**
 * @fileoverview Firestore Security Rules for FinSafe application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user's data (budgets, transactions, etc.)
 * is stored under their respective user ID, ensuring that only the authenticated user can access their
 * own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with subcollections for budgets, transactions, categories,
 * saving goals, alerts, and emergency contacts.
 *
 * Key Security Decisions:
 * - Users can only access their own data; no cross-user access is allowed.
 * - Listing operations are restricted to the owner of the data.
 * - Data consistency between the path and document fields is enforced.
 * - No public read access is granted to user-specific data.
 *
 * Denormalization for Authorization:
 *  The 'userId' field is present in every document and enforces path consistency.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the existing resource.
     * @param {string} userId The user ID to compare against the resource's userId.
     * @return {boolean} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for the /users/{userId} document.
     * @path /users/{userId}
     * @allow (create) User 'user123' can create their own user document.
     * @deny (create) User 'anotherUser' cannot create a user document with ID 'user123'.
     * @allow (get, update, delete) User 'user123' can read, update, and delete their own user document.
     * @deny (get, update, delete) User 'anotherUser' cannot read, update, or delete user document 'user123'.
     * @principle Enforces document ownership and prevents unauthorized access to user profiles.
     */
    match /users/{userId} {
      // Users can only create their own user document
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      // Users can only get their own user document
      allow get: if isOwner(userId);
      // Users can only list user documents, which is effectively disabled since the user list is not public
      allow list: if false;
      // Users can only update their own user document
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      // Users can only delete their own user document
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/budgets/{budgetId} document.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) User 'user123' can create a budget in their own budgets collection.
     * @deny (create) User 'anotherUser' cannot create a budget in user 'user123's budgets collection.
     * @allow (get, update, delete) User 'user123' can read, update, and delete their own budget.
     * @deny (get, update, delete) User 'anotherUser' cannot read, update, or delete user 'user123's budget.
     * @principle Enforces document ownership for budgets and prevents unauthorized access.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/transactions/{transactionId} document.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) User 'user123' can create a transaction in their own transactions collection.
     * @deny (create) User 'anotherUser' cannot create a transaction in user 'user123's transactions collection.
     * @allow (get, update, delete) User 'user123' can read, update, and delete their own transaction.
     * @deny (get, update, delete) User 'anotherUser' cannot read, update, or delete user 'user123's transaction.
     * @principle Enforces document ownership for transactions and prevents unauthorized access.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/categories/{categoryId} document.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) User 'user123' can create a category in their own categories collection.
     * @deny (create) User 'anotherUser' cannot create a category in user 'user123's categories collection.
     * @allow (get, update, delete) User 'user123' can read, update, and delete their own category.
     * @deny (get, update, delete) User 'anotherUser' cannot read, update, or delete user 'user123's category.
     * @principle Enforces document ownership for categories and prevents unauthorized access.
     */
    match /users/{userId}/categories/{categoryId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/savingGoals/{savingGoalId} document.
     * @path /users/{userId}/savingGoals/{savingGoalId}
     * @allow (create) User 'user123' can create a saving goal in their own saving goals collection.
     * @deny (create) User 'anotherUser' cannot create a saving goal in user 'user123's saving goals collection.
     * @allow (get, update, delete) User 'user123' can read, update, and delete their own saving goal.
     * @deny (get, update, delete) User 'anotherUser' cannot read, update, or delete user 'user123's saving goal.
     * @principle Enforces document ownership for saving goals and prevents unauthorized access.
     */
    match /users/{userId}/savingGoals/{savingGoalId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/alerts/{alertId} document.
     * @path /users/{userId}/alerts/{alertId}
     * @allow (create) User 'user123' can create an alert in their own alerts collection.
     * @deny (create) User 'anotherUser' cannot create an alert in user 'user123's alerts collection.
     * @allow (get, update, delete) User 'user123' can read, update, and delete their own alert.
     * @deny (get, update, delete) User 'anotherUser' cannot read, update, or delete user 'user123's alert.
     * @principle Enforces document ownership for alerts and prevents unauthorized access.
     */
    match /users/{userId}/alerts/{alertId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/emergencyContacts/{contactId} document.
     * @path /users/{userId}/emergencyContacts/{contactId}
     * @allow (create) User 'user123' can create an emergency contact in their own emergency contacts collection.
     * @deny (create) User 'anotherUser' cannot create an emergency contact in user 'user123's emergency contacts collection.
     * @allow (get, update, delete) User 'user123' can read, update, and delete their own emergency contact.
     * @deny (get, update, delete) User 'anotherUser' cannot read, update, or delete user 'user123's emergency contact.
     * @principle Enforces document ownership for emergency contacts and prevents unauthorized access.
     */
    match /users/{userId}/emergencyContacts/{contactId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}