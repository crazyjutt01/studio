/**
 * @fileOverview Firestore Security Rules for FinSafe application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model, ensuring that only the authenticated user can access their own data.
 * All data is nested under /users/{userId} to provide a clear ownership hierarchy.
 * Data shapes are not strictly enforced to allow for rapid prototyping and flexible schema changes.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/budgets/{budgetId}: Stores budget information for a specific user.
 * - /users/{userId}/transactions/{transactionId}: Stores transaction information for a specific user.
 * - /users/{userId}/categories/{categoryId}: Stores categories for transactions for a specific user.
 * - /users/{userId}/savingGoals/{savingGoalId}: Stores saving goal information for a specific user.
 * - /users/{userId}/alerts/{alertId}: Stores alert information for a specific user.
 * - /users/{userId}/emergencyContacts/{contactId}: Stores emergency contact information for a specific user.
 *
 * Key Security Decisions:
 * - All collections are user-scoped. Only the authenticated user can access data under their own user ID.
 * - List operations are restricted to the owner of the data, preventing unauthorized listing of other users' data.
 * - The rules prioritize simplicity and performance by avoiding `get()` calls and enforcing ownership through path-based matching.
 *
 * Denormalization for Authorization:
 * - Each document under /users/{userId} inherently includes the userId, eliminating the need for separate authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user documents based on ownership.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get, list) User with ID 'user123' can read their own profile.
     * @allow (update, delete) User with ID 'user123' can update/delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
    }

    /**
     * @description Grants access to budget documents based on ownership.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) User with ID 'user123' can create a budget under their profile.
     * @allow (get, list) User with ID 'user123' can read their own budgets.
     * @allow (update, delete) User with ID 'user123' can update/delete their own budgets.
     * @deny (create) User with ID 'user456' cannot create a budget under user123's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
    }

    /**
     * @description Grants access to transaction documents based on ownership.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) User with ID 'user123' can create a transaction under their profile.
     * @allow (get, list) User with ID 'user123' can read their own transactions.
     * @allow (update, delete) User with ID 'user123' can update/delete their own transactions.
     * @deny (create) User with ID 'user456' cannot create a transaction under user123's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
    }

    /**
     * @description Grants access to category documents based on ownership.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) User with ID 'user123' can create a category under their profile.
     * @allow (get, list) User with ID 'user123' can read their own categories.
     * @allow (update, delete) User with ID 'user123' can update/delete their own categories.
     * @deny (create) User with ID 'user456' cannot create a category under user123's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
    }

    /**
     * @description Grants access to saving goal documents based on ownership.
     * @path /users/{userId}/savingGoals/{savingGoalId}
     * @allow (create) User with ID 'user123' can create a saving goal under their profile.
     * @allow (get, list) User with ID 'user123' can read their own saving goals.
     * @allow (update, delete) User with ID 'user123' can update/delete their own saving goals.
     * @deny (create) User with ID 'user456' cannot create a saving goal under user123's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/savingGoals/{savingGoalId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
    }

    /**
     * @description Grants access to alert documents based on ownership.
     * @path /users/{userId}/alerts/{alertId}
     * @allow (create) User with ID 'user123' can create an alert under their profile.
     * @allow (get, list) User with ID 'user123' can read their own alerts.
     * @allow (update, delete) User with ID 'user123' can update/delete their own alerts.
     * @deny (create) User with ID 'user456' cannot create an alert under user123's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/alerts/{alertId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
    }

    /**
     * @description Grants access to emergency contact documents based on ownership.
     * @path /users/{userId}/emergencyContacts/{contactId}
     * @allow (create) User with ID 'user123' can create an emergency contact under their profile.
     * @allow (get, list) User with ID 'user123' can read their own emergency contacts.
     * @allow (update, delete) User with ID 'user123' can update/delete their own emergency contacts.
     * @deny (create) User with ID 'user456' cannot create an emergency contact under user123's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/emergencyContacts/{contactId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
    }
  }
}