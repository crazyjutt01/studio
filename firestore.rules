/**
 * @fileoverview Firestore Security Rules for FinSafe application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model where each user can only
 * access their own data. All data is nested under /users/{userId}, ensuring
 * data isolation and simplified security rules. All writes must be authenticated.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read/write their own profile.
 * - /users/{userId}/budgets/{budgetId}: Stores budget information for a specific user.
 * - /users/{userId}/transactions/{transactionId}: Stores transaction information for a specific user.
 * - /users/{userId}/categories/{categoryId}: Stores categories for transactions for a specific user.
 * - /users/{userId}/savingGoals/{savingGoalId}: Stores saving goal information for a specific user.
 * - /users/{userId}/alerts/{alertId}: Stores alert information for a specific user.
 * - /users/{userId}/emergencyContacts/{contactId}: Stores emergency contact information for a specific user.
 *
 * Key Security Decisions:
 * - All collections are scoped to a specific user, and rules enforce that only the
 *   authenticated user can access their own data.
 * - Read and write access is controlled through the `isOwner(userId)` function,
 *   which checks if the authenticated user's UID matches the userId in the path.
 * - Data consistency between the path and the document's internal fields is enforced
 *   on create and update operations to prevent unauthorized data access.
 * - List operations are secured by allowing only the owner to list their own documents.
 *
 * Denormalization for Authorization:
 * All authorization checks are performed directly on the documents being secured,
 * avoiding slow, costly, or impossible security checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user data.
     * @path /users/{userId}
     * @allow (read, write) if request.auth.uid == 'user123'
     * @deny (read, write) if request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Verified Identity: All authorization decisions must rely on `request.auth` as the source of truth.
      function isSignedIn() {
        return request.auth != null;
      }

      // Ownership: Use for paths like `/users/{userId}/...`. The primary helper function here should be `isOwner(userId)`.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Check if the user exists before allowing updates or deletes
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow self-creation
      allow create: if isOwner(userId);

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.

      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own budget data.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create, read, update, delete) if request.auth.uid == 'user123'
     * @deny (create, read, update, delete) if request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/budgets/{budgetId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return isSignedIn() && request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);

        allow update: if isExistingOwner(userId) && resource.data.userId == userId;
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own transaction data.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create, read, update, delete) if request.auth.uid == 'user123'
     * @deny (create, read, update, delete) if request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/transactions/{transactionId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return isSignedIn() && request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);

        allow update: if isExistingOwner(userId) && resource.data.userId == userId;
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own category data.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create, read, update, delete) if request.auth.uid == 'user123'
     * @deny (create, read, update, delete) if request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/categories/{categoryId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return isSignedIn() && request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);

        allow update: if isExistingOwner(userId) && resource.data.userId == userId;
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own saving goal data.
     * @path /users/{userId}/savingGoals/{savingGoalId}
     * @allow (create, read, update, delete) if request.auth.uid == 'user123'
     * @deny (create, read, update, delete) if request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/savingGoals/{savingGoalId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return isSignedIn() && request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);

        allow update: if isExistingOwner(userId) && resource.data.userId == userId;
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own alert data.
     * @path /users/{userId}/alerts/{alertId}
     * @allow (create, read, update, delete) if request.auth.uid == 'user123'
     * @deny (create, read, update, delete) if request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/alerts/{alertId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return isSignedIn() && request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);

        allow update: if isExistingOwner(userId) && resource.data.userId == userId;
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own emergency contact data.
     * @path /users/{userId}/emergencyContacts/{contactId}
     * @allow (create, read, update, delete) if request.auth.uid == 'user123'
     * @deny (create, read, update, delete) if request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/emergencyContacts/{contactId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return isSignedIn() && request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);

        allow update: if isExistingOwner(userId) && resource.data.userId == userId;
        allow delete: if isExistingOwner(userId);
    }
  }
}