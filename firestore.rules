/**
 * @fileoverview Firestore Security Rules for FinSafe Application
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model where each user has exclusive access to their own data,
 * including budgets, transactions, categories, saving goals, alerts, emergency contacts, and challenges.
 *
 * Data Structure: All data is nested under /users/{userId}, ensuring data isolation and efficient querying.
 *
 * Key Security Decisions:
 * - Users can only access their own data. Listing other users' data is disallowed.
 * - The `create` operation for a user's root document (`/users/{userId}`) is allowed only if the authenticated user's UID
 *   matches the document ID, enabling self-registration.
 * - All write operations (create, update, delete) are protected by an ownership check.
 *
 * Denormalization for Authorization:
 * - User ID is used in the path for all user-specific data, enabling simple `isOwner()` checks without needing to read
 *   additional documents.
 *
 * Structural Segregation:
 * - All user-specific data is stored under the /users/{userId} path, preventing accidental public access or mixing of data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user document.
     * @path /users/{userId}
     * @allow (create) if the user's ID matches the authenticated user's ID, allowing self-registration.
     * @allow (get, update, delete) if the user's ID matches. Listing all users is not allowed.
     * @deny (create, update, delete) if the user's ID does not match.
     * @principle Enforces strict ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own budgets.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create, update, get, list, delete) if the user's ID matches.
     * @principle Enforces strict ownership for user budgets.
     */
    match /users/{userId}/budgets/{budgetId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own transactions.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create, update, get, list, delete) if the user's ID matches.
     * @principle Enforces strict ownership for user transactions.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own categories.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create, update, get, list, delete) if the user's ID matches.
     * @principle Enforces strict ownership for user categories.
     */
    match /users/{userId}/categories/{categoryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own saving goals.
     * @path /users/{userId}/savingGoals/{savingGoalId}
     * @allow (create, update, get, list, delete) if the user's ID matches.
     * @principle Enforces strict ownership for user saving goals.
     */
    match /users/{userId}/savingGoals/{savingGoalId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own alerts.
     * @path /users/{userId}/alerts/{alertId}
     * @allow (create, update, get, list, delete) if the user's ID matches.
     * @principle Enforces strict ownership for user alerts.
     */
    match /users/{userId}/alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own emergency contacts.
     * @path /users/{userId}/emergencyContacts/{contactId}
     * @allow (create, update, get, list, delete) if the user's ID matches.
     * @principle Enforces strict ownership for user emergency contacts.
     */
    match /users/{userId}/emergencyContacts/{contactId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
    /**
     * @description Allows users to read and write their own challenges.
     * @path /users/{userId}/challenges/{challengeId}
     * @allow (create, update, get, list, delete) if the user's ID matches.
     * @principle Enforces strict ownership for user challenges.
     */
    match /users/{userId}/challenges/{challengeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}